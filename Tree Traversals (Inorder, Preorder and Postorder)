//InOrder TRAVERSAL (L-->N-->R)

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        traverse(node.left,ans);
        ans.add(node.val);
        traverse(node.right,ans);
    }
}


//PreOrder TRAVERSAL (N-->L-->R)

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        ans.add(node.val);
        traverse(node.left,ans);
        traverse(node.right,ans);
    }
}


//PostOrder TRAVERSAL (L-->R-->N)

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        traverse(node.left,ans);
        traverse(node.right,ans);
        ans.add(node.val);
    }
}
