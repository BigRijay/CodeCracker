//Sort array on basis of start element of each range --> Change each element's end to the max b/t its end and the ith index's end --> 
//--> Replace the next overlapping interval with the next smallest non-overlapping interval --> Slice the array 

//Time Complexity: O(n*log(n))
//Auxiliary Space Complexity: O(1)

class Solution {
    public int[][] merge(int[][] intervals) {
        int start,end;
        int index=0;
        Arrays.sort(intervals,(i1, i2) -> Integer.compare(i1[0], i2[0]));
        
        for(int i=1;i<intervals.length;i++){
            start=intervals[i][0];
            end=intervals[i][1];
            if(intervals[index][1]>=start){
                intervals[index][1]=Math.max(end,intervals[index][1]);
            }else{
                index++;
                intervals[index]=intervals[i];
            }
        }
        intervals=Arrays.copyOfRange(intervals,0,index+1);
        return intervals;
    }
}
