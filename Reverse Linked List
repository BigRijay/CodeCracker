USING ITERATION
//LOGIC: Initialize three pointers prev as NULL, curr as head and next as NULL --> Iterate through the linked list. In loop, do --> 
         Before changing next of current, store next node -->
         next = curr->next --> Now change next of current (This is where actual reversing happens) 
         curr->next = prev --> Move prev and curr one step forward -->
         prev = curr 
         curr = next
//Time Complexity: O(n) 
//Auxiliary Space: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr=head;
        ListNode prev=null;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;  
        }
        return prev;
    }
}

USING RECURSION
//LOGIC: Similar to iterative approach
//Time Complexity: O(logn) 
//Auxiliary Space: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        return func(null,head);
    }
    static ListNode func(ListNode prev,ListNode curr){
        if(curr.next!=null ){
            ListNode temp=curr.next;
            curr.next=prev;
            return func(curr,temp);
        }
        curr.next=prev;
        return curr;
    }
}
