//LOGIC:  Sort the array, and then fix two pointers, so the remaining sum will be (target – (nums[i] + nums[j])) --> 
          Now we fix two-pointers, left and right, and use two-pointer approach to find the remaining two numbers of the quad -->
          (In order to avoid duplications, we jump the duplicates, because taking duplicates will result in repeating quads.
          We can easily jump duplicates, by skipping the same elements by running a loop.)

//Time Complexity: O(n³) 
//There are 2 nested loops and the front pointer as well as the right pointer (Third nested loop)
//Space Complexity: O(1)
//Generally the space complexity that is used to return the answer is ignored

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer>> list=new ArrayList<List<Integer>>();
        if (nums == null || nums.length <4)
            return list;
        int n=nums.length;
        Arrays.sort(nums);
        
        for(int i=0;i<n-3;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n-2;j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue;
                int left=j+1,right=n-1;
                long sum2= nums[i]+nums[j];
                while(left<right){
                    long sum4=nums[right]+nums[left]+sum2;
                    if(target>sum4 || (left>j+1 && nums[left]==nums[left-1])){ 
                        left++; continue;}
                    if(target<sum4 || (right<n-1 && nums[right]==nums[right+1])){ 
                        right--; continue;}
                    list.add(Arrays.asList(nums[i], nums[j], nums[right], nums[left]));
                    left++;
                    right--;
                }
            }
        }
        return list;
    }
    
}
