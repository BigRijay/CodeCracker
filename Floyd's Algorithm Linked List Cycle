//LOGIC: Traverse linked list using two pointers --> Move one pointer(slow_p) by one and another pointer(fast_p) by two --> If these pointers meet at the same node then there is a loop -->
         If pointers do not meet then linked list doesnâ€™t have a loop --> Since the difference between both pointers increases by 1 each time after both enter the loop -->
         It is guaranteed that they'll meet if a loop exists
         
//Time complexity: O(n). 
//Only one traversal of the loop is needed.
//Auxiliary Space:O(1). 
//There is no space required.         

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null){
            return false;
        }
        ListNode curr1=head;
        ListNode curr2=head.next;
        while(curr2!=null && curr2.next!=null){
            if(curr1!=curr2){
                curr1=curr1.next;
                curr2=curr2.next.next;
            }else{
                return true;
            }
        }
        return false;
    }
}
